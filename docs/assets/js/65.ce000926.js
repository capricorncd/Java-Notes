(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{348:function(v,r,t){"use strict";t.r(r);var _=t(10),p=Object(_.a)({},(function(){var v=this,r=v._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[r("h1",{attrs:{id:"spring-框架简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-框架简介"}},[v._v("#")]),v._v(" Spring 框架简介")]),v._v(" "),r("p",[v._v("Spring 是一个开源框架，是为了解决企业应用程序开发复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许您选择使用哪一个组件，同时为 J2EE 应用程序开发提供集成的框架。")]),v._v(" "),r("p",[v._v("下载地址：")]),v._v(" "),r("p",[v._v("https://repo.spring.io/release/org/springframework/spring/")]),v._v(" "),r("p",[v._v("https://repo.spring.io/libs-release-local/org/springframework/spring/")]),v._v(" "),r("p",[v._v("这里主要学习：")]),v._v(" "),r("p",[r("strong",[v._v("其轻量级的控制反转(IoC)和面向切面(AOP)的容器框架")])]),v._v(" "),r("ul",[r("li",[r("p",[v._v("大小与开销两方面而言Spring都是轻量级的。")])]),v._v(" "),r("li",[r("p",[v._v("通过控制反转(IoC)的技术达到松耦合的目的。")])]),v._v(" "),r("li",[r("p",[v._v("提供了"),r("strong",[v._v("面向切面编程")]),v._v("的丰富支持，允许通过分离应用的业务逻辑与系统服务进行内聚性的开发。(比如商品管理：商品的出库入库就是业务逻辑；如入库和出库都要统一的日志记录和数额管理，与具体的业务无关，无论什么样的业务都要使用到服务，就把它称为系统服务)")])]),v._v(" "),r("li",[r("p",[v._v("包含并管理应用对象的配置和生命周期，这个意义上是一种容器，即对象的创建和销毁都是由Spring自己完成")])]),v._v(" "),r("li",[r("p",[v._v("将简单的组件配置、组合成为复杂的应用，这个意义上讲Spring就是一个框架")])])]),v._v(" "),r("p",[r("img",{attrs:{src:"/img/spring/spring-framework.gif",alt:"spring-framework"}})]),v._v(" "),r("h3",{attrs:{id:"为什么是spring"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#为什么是spring"}},[v._v("#")]),v._v(" 为什么是Spring")]),v._v(" "),r("ul",[r("li",[r("p",[v._v("在Spring上开发应用简单、方便、快捷")])]),v._v(" "),r("li",[r("p",[v._v("Spring带来了"),r("strong",[v._v("复杂JavaEE")]),v._v("开发的春天")])])]),v._v(" "),r("p",[r("img",{attrs:{src:"/img/spring/framework-runtime.png",alt:"framework-runtime"}})]),v._v(" "),r("p",[r("strong",[v._v("核心容器")])]),v._v(" "),r("p",[v._v("核心容器由spring-core，spring-beans，spring-context，spring-context-support和spring-expression（SpEL，Spring表达式语言，Spring Expression Language）等模块组成，它们的细节如下：")]),v._v(" "),r("ul",[r("li",[r("p",[v._v("spring-core模块提供了框架的基本组成部分，包括 IoC 和依赖注入功能。")])]),v._v(" "),r("li",[r("p",[v._v("spring-beans 模块提供 BeanFactory，工厂模式的微妙实现，它移除了编码式单例的需要，并且可以把配置和依赖从实际编码逻辑中解耦。")])]),v._v(" "),r("li",[r("p",[v._v("context模块建立在由core和 beans 模块的基础上建立起来的，它以一种类似于JNDI注册的方式访问对象。Context模块继承自Bean模块，并且添加了国际化（比如，使用资源束）、事件传播、资源加载和透明地创建上下文（比如，通过Servelet容器）等功能。Context模块也支持Java EE的功能，比如EJB、JMX和远程调用等。ApplicationContext接口是Context模块的焦点。spring-context-support提供了对第三方库集成到Spring上下文的支持，比如缓存（EhCache, Guava, JCache）、邮件（JavaMail）、调度（CommonJ, Quartz）、模板引擎（FreeMarker, JasperReports, Velocity）等。")])]),v._v(" "),r("li",[r("p",[v._v("spring-expression模块提供了强大的表达式语言，用于在运行时查询和操作对象图。它是JSP2.1规范中定义的统一表达式语言的扩展，支持set和get属性值、属性赋值、方法调用、访问数组集合及索引的内容、逻辑算术运算、命名变量、通过名字从Spring IoC容器检索对象，还支持列表的投影、选择以及聚合等。")])])]),v._v(" "),r("p",[v._v("它们的完整依赖关系如下图所示：")]),v._v(" "),r("p",[r("img",{attrs:{src:"/img/spring/spring-core.png",alt:"spring-core"}})]),v._v(" "),r("p",[r("strong",[v._v("数据访问/集成")])]),v._v(" "),r("p",[v._v("数据访问/集成层包括 JDBC，ORM，OXM，JMS 和事务处理模块，它们的细节如下：")]),v._v(" "),r("p",[v._v("（注：JDBC=Java Data Base Connectivity，ORM=Object Relational Mapping，OXM=Object XML Mapping，JMS=Java Message Service）")]),v._v(" "),r("p",[v._v("JDBC 模块提供了JDBC抽象层，它消除了冗长的JDBC编码和对数据库供应商特定错误代码的解析。")]),v._v(" "),r("p",[v._v("ORM 模块提供了对流行的对象关系映射API的集成，包括JPA、JDO和Hibernate等。通过此模块可以让这些ORM框架和spring的其它功能整合，比如前面提及的事务管理。")]),v._v(" "),r("p",[v._v("OXM 模块提供了对OXM实现的支持，比如JAXB、Castor、XML Beans、JiBX、XStream等。")]),v._v(" "),r("p",[v._v("JMS 模块包含生产（produce）和消费（consume）消息的功能。从Spring 4.1开始，集成了spring-messaging模块。。")]),v._v(" "),r("p",[v._v("事务模块为实现特殊接口类及所有的 POJO 支持编程式和声明式事务管理。（注：编程式事务需要自己写beginTransaction()、commit()、rollback()等事务管理方法，声明式事务是通过注解或配置由spring自动处理，编程式事务粒度更细）")]),v._v(" "),r("p",[r("strong",[v._v("Web")])]),v._v(" "),r("p",[v._v("Web 层由 Web，Web-MVC，Web-Socket 和 Web-Portlet 组成，它们的细节如下：")]),v._v(" "),r("p",[v._v("Web 模块提供面向web的基本功能和面向web的应用上下文，比如多部分（multipart）文件上传功能、使用Servlet监听器初始化IoC容器等。它还包括HTTP客户端以及Spring远程调用中与web相关的部分。。")]),v._v(" "),r("p",[v._v("Web-MVC 模块为web应用提供了模型视图控制（MVC）和REST Web服务的实现。Spring的MVC框架可以使领域模型代码和web表单完全地分离，且可以与Spring框架的其它所有功能进行集成。")]),v._v(" "),r("p",[v._v("Web-Socket 模块为 WebSocket-based 提供了支持，而且在 web 应用程序中提供了客户端和服务器端之间通信的两种方式。")]),v._v(" "),r("p",[v._v("Web-Portlet 模块提供了用于Portlet环境的MVC实现，并反映了spring-webmvc模块的功能。")]),v._v(" "),r("p",[r("strong",[v._v("其他")])]),v._v(" "),r("p",[v._v("还有其他一些重要的模块，像 AOP，Aspects，Instrumentation，Web 和测试模块，它们的细节如下：")]),v._v(" "),r("p",[v._v("AOP 模块提供了面向方面的编程实现，允许你定义方法拦截器和切入点对代码进行干净地解耦，从而使实现功能的代码彻底的解耦出来。使用源码级的元数据，可以用类似于.Net属性的方式合并行为信息到代码中。")]),v._v(" "),r("p",[v._v("Aspects 模块提供了与 AspectJ 的集成，这是一个功能强大且成熟的面向切面编程（AOP）框架。")]),v._v(" "),r("p",[v._v("Instrumentation 模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。")]),v._v(" "),r("p",[v._v("Messaging 模块为 STOMP 提供了支持作为在应用程序中 WebSocket 子协议的使用。它也支持一个注解编程模型，它是为了选路和处理来自 WebSocket 客户端的 STOMP 信息。")]),v._v(" "),r("p",[v._v("测试模块支持对具有 JUnit 或 TestNG 框架的 Spring 组件的测试。")]),v._v(" "),r("h3",{attrs:{id:"spring作用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring作用"}},[v._v("#")]),v._v(" Spring作用")]),v._v(" "),r("ul",[r("li",[r("p",[v._v("容器")])]),v._v(" "),r("li",[r("p",[v._v("通过了对多种技术的支持：JMS、MQ支持、UnitTest、...")])]),v._v(" "),r("li",[r("p",[v._v("AOP(事务管理、日志等)")])]),v._v(" "),r("li",[r("p",[v._v("提供了众多方便应用的辅助类(JDBC Template等)")])]),v._v(" "),r("li",[r("p",[v._v("对主流应用框架(Hibernate等）提供了良好的支持")])])]),v._v(" "),r("h3",{attrs:{id:"适用范围"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#适用范围"}},[v._v("#")]),v._v(" 适用范围")]),v._v(" "),r("ul",[r("li",[r("p",[v._v("构建企业应用(SpringMVC+Spring+Hibernate/"),r("a",{attrs:{href:"https://baike.baidu.com/item/ibatis/10787592",target:"_blank",rel:"noopener noreferrer"}},[v._v("iBATIS"),r("OutboundLink")],1),v._v(")")])]),v._v(" "),r("li",[r("p",[v._v("单独使用Bean容器(Bean管理)")])]),v._v(" "),r("li",[r("p",[v._v("单独使用AOP进行切面处理")])]),v._v(" "),r("li",[r("p",[v._v("其他的Spring功能，如：对消息的支持等")])]),v._v(" "),r("li",[r("p",[v._v("在互联网中的应用...")])])]),v._v(" "),r("h3",{attrs:{id:"软件框架"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#软件框架"}},[v._v("#")]),v._v(" 软件框架")]),v._v(" "),r("p",[v._v("维基百科："),r("strong",[v._v("软件框架")]),v._v("，通常指的是为了实现某个业界标准或完成特定基本任务的软件组件规范，也指为了实现某个软件组织规范时，提供规范所要求的基础功能的软件产品。")]),v._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[v._v("框架")]),v._v(" "),r("p",[v._v("是制定一套规范或规则（思想），大家（程序员）在该规范或者规则（思想）下工作。或者说就是使用别人搭好的舞台，你来做表演。")])]),v._v(" "),r("p",[r("strong",[v._v("特点")]),v._v("：")]),v._v(" "),r("ul",[r("li",[r("p",[v._v("半成品")])]),v._v(" "),r("li",[r("p",[v._v("封装了特定的处理流程和控制逻辑。（处理流程是为了完成自身的处理流程）")])]),v._v(" "),r("li",[r("p",[v._v("成熟的、不断升级改进的软件")])])]),v._v(" "),r("p",[r("strong",[v._v("框架与类库的区别")])]),v._v(" "),r("ul",[r("li",[r("p",[v._v("框架一般是封装了逻辑、高内聚的，类库则是松散的工具组合")])]),v._v(" "),r("li",[r("p",[v._v("框架专注于某一领域，类库则是更通用的")])]),v._v(" "),r("li",[r("p",[v._v("类库通过不同的组合，可以组合出不同的框架")])])]),v._v(" "),r("p",[r("strong",[v._v("为什么使用框架")])]),v._v(" "),r("ul",[r("li",[r("p",[v._v("软件系统日趋复杂")])]),v._v(" "),r("li",[r("p",[v._v("重用度高，开发效率和质量提高")])]),v._v(" "),r("li",[r("p",[v._v("软件设计人员要专注于对领域的了解，使需求分析充分")])]),v._v(" "),r("li",[r("p",[v._v("框架有完整的文档，易于学习、上手、快速解决问题")])])]),v._v(" "),r("h3",{attrs:{id:"参考资料-扩展阅读"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料-扩展阅读"}},[v._v("#")]),v._v(" 参考资料&&扩展阅读")]),v._v(" "),r("p",[v._v("https://www.imooc.com/learn/196")]),v._v(" "),r("p",[v._v("https://www.ibm.com/developerworks/cn/java/wa-spring1/")]),v._v(" "),r("p",[v._v("https://www.w3cschool.cn/wkspring/")])])}),[],!1,null,null,null);r.default=p.exports}}]);